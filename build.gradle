buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}")
	}
}

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

group = "oai-nodegen-example"
version = '1.0.0'

repositories {
	mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile "org.mockito:mockito-all:1.10.19"
	testCompile "org.springframework.boot:spring-boot-starter-test:${springboot_version}"
	
	testCompile "org.hamcrest:hamcrest-all:1.3"

	compile "org.apache.commons:commons-lang3:3.4"
	compile "javax.inject:javax.inject:1"
	compile "javax.validation:validation-api:1.1.0.Final"
	
	compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
	compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
	compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
	
	compile "org.springframework.boot:spring-boot-starter-jersey:${springboot_version}"
	compile "org.springframework.boot:spring-boot-starter-tomcat:${springboot_version}"
	compile "org.springframework.boot:spring-boot-starter-actuator:${springboot_version}"
	compile "org.springframework.boot:spring-boot-starter-data-mongodb:${springboot_version}"
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.10'
}

def generatedSourceDir = "$projectDir/build/generated-src/main/java"

ext {
	npmCommand = Os.isFamily(Os.FAMILY_WINDOWS) ? 'npm.cmd' : 'npm'
}

task npmInstall(type: Exec) {
    commandLine npmCommand, 'install'
}

task npmBuild(type: Exec) {
    commandLine npmCommand, 'run', 'build'
}

npmBuild.dependsOn npmInstall

compileJava.dependsOn npmBuild

sourceSets {
    main {
        output.dir(generatedSourceDir, builtBy: 'npmBuild')
        java.srcDirs generatedSourceDir
    }
}
clean {
    delete generatedSourceDir
}
idea {
    module {
        sourceDirs += file(generatedSourceDir)
    }
}
